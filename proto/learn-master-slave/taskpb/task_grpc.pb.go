// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: task.proto

package taskpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Master_WorkerStream_FullMethodName = "/taskpb.Master/WorkerStream"
)

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	// Bidirectional stream: Worker -> Master (WorkerMsg), Master -> Worker (MasterMsg)
	WorkerStream(ctx context.Context, opts ...grpc.CallOption) (Master_WorkerStreamClient, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) WorkerStream(ctx context.Context, opts ...grpc.CallOption) (Master_WorkerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[0], Master_WorkerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &masterWorkerStreamClient{stream}
	return x, nil
}

type Master_WorkerStreamClient interface {
	Send(*WorkerMsg) error
	Recv() (*MasterMsg, error)
	grpc.ClientStream
}

type masterWorkerStreamClient struct {
	grpc.ClientStream
}

func (x *masterWorkerStreamClient) Send(m *WorkerMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *masterWorkerStreamClient) Recv() (*MasterMsg, error) {
	m := new(MasterMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility
type MasterServer interface {
	// Bidirectional stream: Worker -> Master (WorkerMsg), Master -> Worker (MasterMsg)
	WorkerStream(Master_WorkerStreamServer) error
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (UnimplementedMasterServer) WorkerStream(Master_WorkerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WorkerStream not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_WorkerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServer).WorkerStream(&masterWorkerStreamServer{stream})
}

type Master_WorkerStreamServer interface {
	Send(*MasterMsg) error
	Recv() (*WorkerMsg, error)
	grpc.ServerStream
}

type masterWorkerStreamServer struct {
	grpc.ServerStream
}

func (x *masterWorkerStreamServer) Send(m *MasterMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *masterWorkerStreamServer) Recv() (*WorkerMsg, error) {
	m := new(WorkerMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskpb.Master",
	HandlerType: (*MasterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WorkerStream",
			Handler:       _Master_WorkerStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "task.proto",
}
